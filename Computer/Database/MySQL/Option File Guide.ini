[mysqld]

#-------------------------------------------------------------------------------
# Our additional server command options
# Reference: https://dev.mysql.com/doc/refman/5.7/en/server-options.html
#-------------------------------------------------------------------------------

# Whether the general query log is enabled.
#general_log=ON

# Set log filename, to prevent using hostname as filename. On Windows, default file location is at `data` folder.
# Recommended (Windows): ../mysqld.log
#general_log_file=mysqld.log

# Set error log filename, to prevent using hostname as filename. On Windows, `--console` takes precedence and will not write to file when `--console` is specified.
# Recommended (Windows): ../mysqld-error.log
#log_error=mysqld-error.log

# This gives anyone with access to the server unrestricted access to all databases. Useful when forget password.
#skip_grant_tables=ON

# Disabling symbolic links is recommended to prevent assorted security risks.
# Recommended (Windows): ON
#skip_symbolic_links=ON

# Set the default server time zone.
# AWS Aurora 5.7 default: (Engine default: SYSTEM)
# Recommended (AWS Aurora local development): +00:00
#default_time_zone=+00:00

#-------------------------------------------------------------------------------
# Our additional server system variables
# Reference: https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html
#-------------------------------------------------------------------------------

# Set the PID filename, to prevent using hostname as filename.
# Recommended (Windows): mysqld.pid
#pid_file=mysqld.pid

# Bind to local address to allow only local access
#bind_address=127.0.0.1

# Whether to write error log output to the system log.
# Default: ON for Windows, OFF for Unix
# Recommended (Windows): OFF
#log_syslog=OFF

# The current server SQL mode, which can be set dynamically.
# Default: ONLY_FULL_GROUP_BY STRICT_TRANS_TABLES NO_ZERO_IN_DATE NO_ZERO_DATE ERROR_FOR_DIVISION_BY_ZERO NO_AUTO_CREATE_USER NO_ENGINE_SUBSTITUTION
# AWS Aurora 5.7 default: 0 (empty)
# Recommended (AWS Aurora local development): NO_AUTO_CREATE_USER
#sql_mode=NO_AUTO_CREATE_USER

# Set default character set to UTF8, see https://medium.com/@adamhooper/in-mysql-never-use-utf8-use-utf8mb4-11761243e434
# Default: latin1
# AWS Aurora 5.7 default: (Engine default: utf8)
character_set_server=utf8mb4

# Set default collation set to unicode sorting, see https://stackoverflow.com/questions/766809/whats-the-difference-between-utf8-general-ci-and-utf8-unicode-ci
# Default: utf8mb4_general_ci when character_set_server=utf8mb4
collation_server=utf8mb4_unicode_ci

# Skip reverse DNS lookup to avoid service interruption due to DNS down
# This option may need to commented out to allow initial login using root account
# After login, execute "RENAME USER 'root'@'localhost' TO 'root'@'::1';" to change the hostname before re-enable this option
#skip_name_resolve=ON

# (MySQL 5.6.6 and higher) Disable deprecated nonstandard behaviors on TIMESTAMP data type
# Default: OFF
# AWS Aurora 5.7 default: ON
explicit_defaults_for_timestamp=ON

# (MySQL 5.7.8 and higher) Make the database read-only, even user with SUPER privilege cannot modify the database, useful on replication slave to prevent data from overwrite accidentally
#super_read_only=ON

# Make the database read-only, however user with SUPER privilege can modify the database, useful on replication slave to prevent data from overwrite accidentally
#read_only=ON

# Disables import and export operations to fix the warning
# Default: `NULL` since MySQL 5.7.16 and higher
#secure_file_priv=NULL

# The maximum permitted number of simultaneous client connections.
# Default: 151
# AWS Aurora 5.7 default: GREATEST(log(DBInstanceClassMemory / 805306368) * 45, log(DBInstanceClassMemory / 8187281408) * 1000)
#max_connections=151

# Size of the buffer used for doing full table scans.
# Allocated per thread, if a full scan is needed.
# Default: 128K
# AWS Aurora 5.7 default: 256K
#read_buffer_size=2M

# When reading rows from a MyISAM table in sorted order following a key-sorting operation, the rows are read through this buffer to avoid disk seeks.
# Allocated per thread, when needed.
# Default: 256K
# AWS Aurora 5.7 default: 512K
#read_rnd_buffer_size=16M

# Sort buffer is used to perform sorts for some ORDER BY and GROUP BY queries.
# Allocated per thread if sort is needed.
# Default: 256K
# AWS Aurora 5.7 default: (Engine default: 256K)
#sort_buffer_size=8M

# This buffer is used for the optimization of full JOINs (JOINs without indexes).
# Allocated per thread if full join is found
# Default: 256K
# AWS Aurora 5.7 default: (Engine default: 256K)
#join_buffer_size=16M

# Query cache is used to cache SELECT results.
# Note: In case your tables change very often or if your queries are textually different every time, the query cache may result in a slowdown instead of a performance improvement.
# Default: 1M
# AWS Aurora 5.7 default: (DBInstanceClassMemory / 24)
#query_cache_size=64M

# Do not cache results that are larger than this number of bytes.
# Default: 1M
# AWS Aurora 5.7 default: (Engine default: 1M)
#query_cache_limit=2M

# The minimum length of the word to be included in a MyISAM FULLTEXT index.
# Default: 4
# AWS Aurora 5.7 default: (Engine default: 4)
#ft_min_word_len=4

# Whether the slow query log is enabled.
# Default: OFF
#slow_query_log=ON

# All queries taking more than this amount of time (in seconds) will be treated as slow.
# Do not use "1" as a value here, as MySQL currently measures time with second accuracy only.
# Default: 10
# AWS Aurora 5.7 default: (Engine default: 10)
#long_query_time=2

# Size of the key buffer, used to cache index blocks for MyISAM tables.
# It will also be used for internal temporary disk tables regardless you're using MyISAM tables or not.
# Default: 8M
# AWS Aurora 5.7 default: 16M
#key_buffer_size=32M

# MyISAM uses a special tree-like cache to make bulk inserts faster. This variable limits the size of the cache tree in bytes per thread.
# This buffer is allocated when a bulk insert is detected.
# Default: 8M
# AWS Aurora 5.7 default: (Engine default: 8M)
#bulk_insert_buffer_size=32M

#-------------------------------------------------------------------------------
# Our additional InnoDB startup options and system variables
# Reference: https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html
#-------------------------------------------------------------------------------

# The size in bytes of the buffer pool, the memory area where InnoDB caches table and index data.
# Default: 128M
# AWS Aurora 5.7 default: (DBInstanceClassMemory * 3 / 4)
#innodb_buffer_pool_size=2G

# The number of I/O threads for async write operations in InnoDB.
# Default: 4
# AWS Aurora 5.7 default: (Engine default: 4)
#innodb_write_io_threads=8

# The number of I/O threads for async read operations in InnoDB.
# Default: 4
# AWS Aurora 5.7 default: (Engine default: 4)
#innodb_read_io_threads=8

#-------------------------------------------------------------------------------
# Our additional replication and binary logging options and variables
# Reference: https://dev.mysql.com/doc/refman/5.7/en/replication-options.html
#-------------------------------------------------------------------------------

# Required unique id between 1 and 2^32 - 1
# Default: 0
#server_id=1

#-------------------------------------------------------------------------------
# Our additional global transaction ID options and variables
# Reference: https://dev.mysql.com/doc/refman/5.7/en/replication-options-gtids.html
#-------------------------------------------------------------------------------

# This option specifies whether global transaction identifiers (GTIDs) are used to identify transactions
#gtid_mode=ON

# When enabled, this option enforces GTID consistency by allowing execution of only those statements that can be logged in a transactionally safe manner
# AWS Aurora 5.7 default: (Engine default: OFF)
#enforce_gtid_consistency=ON

#-------------------------------------------------------------------------------
# Our additional binary logging options and variables
# Reference: https://dev.mysql.com/doc/refman/5.7/en/replication-options-binary-log.html
#-------------------------------------------------------------------------------

# Logging changes to the binary log between backups.
#log_bin=mysqld-bin

# This variable sets the binary logging format, and can be any one of STATEMENT, ROW, or MIXED
# Default: `ROW` since MySQL 5.7.7 and higher
#binlog_format=ROW

# Controls whether stored function creators can be trusted not to create stored functions that will cause unsafe events to be written to the binary log.
# Default: OFF
# AWS Aurora 5.7 default: (Engine default: OFF)
#log_bin_trust_function_creators=ON

# Whether updates received by a slave server from a master server should be logged to the slave's own binary log
# AWS Aurora 5.7 default: ON
#log_slave_updates=ON

# Set automatic binary log file removal
# Default: 0
#expire_logs_days=90

#-------------------------------------------------------------------------------
# Our additional replication slave options and variables
# Reference: https://dev.mysql.com/doc/refman/5.7/en/replication-options-slave.html
#-------------------------------------------------------------------------------

# The host name or IP address of the slave to be reported to the master during slave registration
#report_host=localhost

# Set the relay log filename, to prevent using hostname as filename
#relay_log=mysqld-relay-bin

# Causes the server to log its relay log info to a file or a table, this is essential to provides a crash-safe replication on slave
# AWS Aurora 5.7 default: TABLE
#relay_log_info_repository=TABLE

# Enables automatic relay log recovery immediately following server startup, this provides a crash-safe replication on slave
# AWS Aurora 5.7 default: ON
#relay_log_recovery=ON

# Determines whether the slave logs master status and connection information to a FILE or to a TABLE, setting to TABLE allows mysqlfailover utility to work
#master_info_repository=TABLE

# Tells the slave server not to start the slave threads when the server starts. Useful for development when the master configuration is known to be invalid.
#skip_slave_start=ON

#-------------------------------------------------------------------------------
# Our additional keyring system variables
# Reference: https://dev.mysql.com/doc/refman/5.7/en/keyring-system-variables.html
#-------------------------------------------------------------------------------

# The path name of the data file used for secure data storage by the keyring_file plugin
# This options should be commented out to allow initialization of data directory to success (for MySQL 5.7.11)
#keyring_file_data=../keyring/keyring
